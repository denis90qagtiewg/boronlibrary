--services
local players = game:GetService("Players")
local tweenService = game:GetService("TweenService")
local runser = game:GetService("RunService")
local core = game:GetService("CoreGui")
local uis = game:GetService("UserInputService")

--variables
local lp = players.LocalPlayer
local mouse = lp:GetMouse()
local camera = workspace.CurrentCamera
local viewport = camera.ViewportSize
local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)

local Library = {}

function Library:validate(defaults, options)
	local options = options or {}
		for i, v in pairs(defaults) do
		if options[i] == nil then
			options[i] = v
		end
	end
	return options
end

function Library:tween(object, goal, callback)
	local tween = tweenService:Create(object, tweenInfo, goal)
	tween.Completed:Connect(callback or function() end)
	tween:Play()
end

local maincolor = Color3.fromRGB(0,0,0)

local toggle = nil
local slider = nil

function Library:init(options)	
	options = Library:validate({
		name = "Boron Library";
		mainsizex = "400";
		mainsizey = "400";
	} ,options or {})
	
	local GUI = {
		CurrentTab = nil;
		State = true;
	}
	
	do --Main Frame
		GUI["1"] = Instance.new("ScreenGui", runser:IsStudio() and players.LocalPlayer:WaitForChild("PlayerGui") or core);
		GUI["1"]["Name"] = [[BoronLibrary]];
		GUI["1"]["IgnoreGuiInset"] = true
		
		GUI["2"] = Instance.new("Frame", GUI["1"]);
		GUI["2"]["BorderSizePixel"] = 2;
		GUI["2"]["BackgroundColor3"] = Color3.fromRGB(50, 50, 50);
		GUI["2"]["Size"] = UDim2.new(0, options.mainsizex, 0, options.mainsizey);
		GUI["2"]["BorderColor3"] = Color3.fromRGB(0, 0, 127);
		GUI["2"]["Position"] = UDim2.fromOffset((viewport.X/2) - (GUI["2"].Size.X.Offset / 2), (viewport.Y/2) - (GUI["2"].Size.Y.Offset / 2));
		GUI["2"]["Name"] = [[Main]];
		
		GUI["6"] = Instance.new("Frame", GUI["2"]);
		GUI["6"]["BorderSizePixel"] = 2;
		GUI["6"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30);
		GUI["6"]["Size"] = UDim2.new(0, options.mainsizex - 20, 0, options.mainsizey - 35);
		GUI["6"]["BorderColor3"] = Color3.fromRGB(65, 65, 65);
		GUI["6"]["Position"] = UDim2.new(0.025, 0, 0.063, 0)
		GUI["6"]["Name"] = [[Inner]];
		
		GUI["7"] = Instance.new("Frame", GUI["6"]);
		GUI["7"]["BorderSizePixel"] = 2;
		GUI["7"]["BackgroundColor3"] = Color3.fromRGB(50, 50, 50);
		GUI["7"]["Size"] = UDim2.new(0, options.mainsizex - 40, 0, options.mainsizey - 55);
		GUI["7"]["BorderColor3"] = Color3.fromRGB(65, 65, 65);
		GUI["7"]["Position"] = UDim2.new(0.02631578966975212, 0, -0.06849315017461777, 35);
		GUI["7"]["Name"] = [[MainInner]];
	end
	
	do --Text
		GUI["3"] = Instance.new("TextLabel", GUI["2"]);
		GUI["3"]["TextWrapped"] = true;
		GUI["3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		GUI["3"]["TextXAlignment"] = Enum.TextXAlignment.Left;
		GUI["3"]["FontFace"] = Font.new([[rbxasset://fonts/families/Nunito.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
		GUI["3"]["TextSize"] = 20;
		GUI["3"]["TextColor3"] = Color3.fromRGB(255, 255 ,255);
		GUI["3"]["Size"] = UDim2.new(0, 400, 0, 20);
		GUI["3"]["Text"] = options["name"];
		GUI["3"]["Name"] = [[Text]];
		GUI["3"]["BackgroundTransparency"] = 1;
		
		GUI["4"] = Instance.new("UIPadding", GUI["3"]);
		GUI["4"]["PaddingTop"] = UDim.new(0, 6);
		GUI["4"]["PaddingLeft"] = UDim.new(0, 6);
	end
	
	do --Navigation
		GUI["8"] = Instance.new("Frame", GUI["7"]);
		GUI["8"]["BorderSizePixel"] = 0;
		GUI["8"]["BackgroundColor3"] = Color3.fromRGB(50, 50, 50);
		GUI["8"]["BackgroundTransparency"] = 1;
		GUI["8"]["Size"] = UDim2.new(0, options.mainsizex - 40, 0, 25);
		GUI["8"]["Name"] = [[Navigation]];
		
		GUI["b"] = Instance.new("UIListLayout", GUI["8"]);
		GUI["b"]["FillDirection"] = Enum.FillDirection.Horizontal;
		GUI["b"]["Padding"] = UDim.new(0, 20);
		GUI["b"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

	end
	
	function Library:Destroy()
		GUI["1"]:Destroy()
	end
	
	function GUI:Toggle()
		if GUI.State == false then
			GUI.State = true
			GUI["1"].Enabled = true
		else
			GUI.State = true
			GUI["1"].Enabled = true
		end
	end
	
	function GUI:CreateTab(options)
		options = Library:validate({
			name = "Preview Tab";
		} ,options or {})
		
		local Tab = {
			Hover = false;
			Active = false;
		}
		
		--Render
		
		do
			Tab["9"] = Instance.new("Frame", GUI["8"]);
			Tab["9"]["BorderSizePixel"] = 2;
			Tab["9"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30);
			Tab["9"]["Size"] = UDim2.new(0, 75, 0, 25);
			Tab["9"]["BorderColor3"] = Color3.fromRGB(65, 65, 65);
			Tab["9"]["Name"] = options.name.."TabButton";

			Tab["a"] = Instance.new("TextLabel", Tab["9"]);
			Tab["a"]["TextWrapped"] = true;
			Tab["a"]["BorderSizePixel"] = 0;
			Tab["a"]["TextScaled"] = true;
			Tab["a"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30);
			Tab["a"]["FontFace"] = Font.new([[rbxasset://fonts/families/Nunito.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
			Tab["a"]["TextSize"] = 18;
			Tab["a"]["TextColor3"] = Color3.fromRGB(200, 200, 200);
			Tab["a"]["Size"] = UDim2.new(0, 75 - 5, 0, 25 - 5);
			Tab["a"]["Text"] = options.name;
			Tab["a"]["Name"] = [[Text]];
			Tab["a"]["Position"] = UDim2.new(0.02666666731238365, 0, 0.07999999821186066, 0);

			Tab["12"] = Instance.new("Frame", GUI["7"]);
			Tab["12"]["BorderSizePixel"] = 0;
			Tab["12"]["BackgroundColor3"] = Color3.fromRGB(45, 45 ,45);
			Tab["12"]["Size"] = UDim2.new(0, 357, 0, 315);
			Tab["12"]["BorderColor3"] = Color3.fromRGB(65, 65, 65)
			Tab["12"]["Position"] = UDim2.new(0.0055555556900799274, 0, -0.03776855394244194, 35);
			Tab["12"]["Name"] = options.name.."Tab";
		end
		
		--Functions
		
		function Tab:Activate()
			if Tab.Active == false then
				if GUI.CurrentTab ~= nil then
					GUI.CurrentTab:Deactivate()
				end
				
				Tab.Active = true
				Library:tween(Tab["a"], {TextColor3 = Color3.fromRGB(255, 255, 255)})
				Library:tween(Tab["a"], {BackgroundColor3 = Color3.fromRGB(45, 45, 45)})
				Tab["12"].Visible = true
				
				GUI.CurrentTab = Tab
			end
		end
		
		function Tab:Deactivate()
			if Tab.Active then
				Tab.Active = false
				Tab.Hover = false
				
				Library:tween(Tab["a"], {TextColor3 = Color3.fromRGB(200, 200, 200)})
				Library:tween(Tab["a"], {BackgroundColor3 = Color3.fromRGB(30, 30, 30)})
				Tab["12"].Visible = false
				 
			end
		end
		
		--Handling
		
		do
			Tab["9"].MouseEnter:Connect(function()
				Tab.Hover = true

				if not Tab.Active then
					Library:tween(Tab["a"], {TextColor3 = Color3.fromRGB(255, 255, 255)})
				end
			end)

			Tab["9"].MouseLeave:Connect(function()
				Tab.Hover = false

				if not Tab.Active then
					Library:tween(Tab["a"], {TextColor3 = Color3.fromRGB(200, 200, 200)})
				end
			end)

			uis.InputBegan:Connect(function(input, gpe)
				if gpe then return end


				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					if Tab.Hover == true then
						Tab:Activate()
					end
				end
			end)

			if GUI.CurrentTab == nil then
				Tab:Activate()
			end
		end
		
		local GroupBox = {}
		
		function Tab:GroupBox(options)
			options = Library:validate({
				name = "Groupbox";
				posx = "5";
				posy = "10";
				sizex = "170";
				sizey = "300";
			} ,options or {})
			
			--Render
			
			do
				GroupBox["13"] = Instance.new("ScrollingFrame", Tab["12"]);
				GroupBox["13"]["BorderSizePixel"] = 2;
				GroupBox["13"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30);
				GroupBox["13"]["Size"] = UDim2.new(0, options.sizex, 0, options.sizey);
				GroupBox["13"]["BorderColor3"] = Color3.fromRGB(65, 65 ,65);
				GroupBox["13"]["Position"] = UDim2.new(0, options.posx, 0, options.posy);
				GroupBox["13"]["Name"] = options.name.."Groupbox";
				GroupBox["13"]["ZIndex"] = 2;
				GroupBox["13"]["ScrollBarThickness"] = 0;
				
				GroupBox["20"] = Instance.new("TextLabel", GroupBox["13"]);
				GroupBox["20"]["TextWrapped"] = true;
				GroupBox["20"]["TextScaled"] = true;
				GroupBox["20"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
				GroupBox["20"]["FontFace"] = Font.new([[rbxasset://fonts/families/Nunito.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
				GroupBox["20"]["TextSize"] = 14;
				GroupBox["20"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
				GroupBox["20"]["Size"] = UDim2.new(0, options.sizex, 0, 25);
				GroupBox["20"]["Text"] = options.name;
				GroupBox["20"]["Name"] = [[Name]];
				GroupBox["20"]["BackgroundTransparency"] = 1;
				GroupBox["20"]["ZIndex"] = 2;	
			end
			
			local gsizex = options.sizex
			local gsizey = options.sizey
			
			function GroupBox:Button(options)
				options = Library:validate({
					text = "New Button";
					posx = "10";
					posy = "25";
					sizex = "150";
					sizey = "25";
					callback = function() end
				} ,options or {})

				local Button = {
					Hover = false;
					MouseDown = false;
				}

				--Render
				
				do
					Button["14"] = Instance.new("Frame", GroupBox["13"]);
					Button["14"]["BorderSizePixel"] = 2;
					Button["14"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30);
					Button["14"]["Size"] = UDim2.new(0, gsizex - 20, 0, 25);
					Button["14"]["BorderColor3"] = Color3.fromRGB(65, 65, 65);
					Button["14"]["Position"] = UDim2.new(0, options.posx, 0, options.posy);
					Button["14"]["Name"] = [[Button]];
					Button["14"]["ZIndex"] = 2

					Button["15"] = Instance.new("TextLabel", Button["14"]);
					Button["15"]["TextWrapped"] = true;
					Button["15"]["TextScaled"] = true;
					Button["15"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30);
					Button["15"]["FontFace"] = Font.new([[rbxasset://fonts/families/Nunito.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
					Button["15"]["TextSize"] = 25;
					Button["15"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
					Button["15"]["Size"] = UDim2.new(0, gsizex - 20, 0, 25);
					Button["15"]["BorderColor3"] = Color3.fromRGB(65, 65 ,65);
					Button["15"]["BorderSizePixel"] = 0
					Button["15"]["Text"] = options.text;
					Button["15"]["Name"] = [[Text]];
					Button["15"]["BackgroundTransparency"] = 0;
					Button["15"]["ZIndex"] = 2
				end

				--Logic
				
				do
					Button["15"].MouseEnter:Connect(function()
						Button.Hover = true
						Library:tween(Button["15"], {BackgroundColor3 = Color3.fromRGB(45, 45, 45)})
					end)

					Button["15"].MouseLeave:Connect(function()
						Button.Hover = false
						if not Button.MouseDown then
							Library:tween(Button["15"], {BackgroundColor3 = Color3.fromRGB(30, 30, 30)})
						end
					end)

					uis.InputBegan:Connect(function(input, gpe)
						if gpe then return end

						if input.UserInputType == Enum.UserInputType.MouseButton1 and Button.Hover then
							Button.MouseDown = true
							Library:tween(Button["15"], {BackgroundColor3 = Color3.fromRGB(30, 30, 30)})
							options.callback()
						end
					end)

					uis.InputEnded:Connect(function(input, gpe)
						if gpe then return end

						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							Button.MouseDown = false
							if Button.Hover then
								Library:tween(Button["15"], {BackgroundColor3 = Color3.fromRGB(45, 45, 45)})
							else
								Library:tween(Button["15"], {BackgroundColor3 = Color3.fromRGB(30, 30, 30)})
							end
						end
					end)
				end

				--Methods
				
				function Button:SetText(text)
					Button["15"].Text = text
				end

				function Button:SetCallback(fn)
					options.callback = fn
				end

				return Button
			end
			
			function GroupBox:Label(options)
				options = Library:validate({
					text = "New Label";
					posy = "55";
					paddingval = 10;
					callback = function() end
				} ,options or {})
				
				local Label = {}
				
				
				--Render
				
				do
					Label["22"] = Instance.new("TextLabel", GroupBox["13"]);
					Label["22"]["TextWrapped"] = true;
					Label["22"]["TextScaled"] = true;
					Label["22"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					Label["22"]["TextXAlignment"] = Enum.TextXAlignment.Left;
					Label["22"]["FontFace"] = Font.new([[rbxasset://fonts/families/Nunito.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
					Label["22"]["TextSize"] = 14;
					Label["22"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
					Label["22"]["Size"] = UDim2.new(0, gsizex - 20, 0, 20);
					Label["22"]["Text"] = options.text;
					Label["22"]["Name"] = [[Label]];
					Label["22"]["BackgroundTransparency"] = 1;
					Label["22"]["Position"] = UDim2.new(0,10, 0, options.posy);
					Label["22"]["ZIndex"] = 2
				end
				
				--Methods
				function Label:SetText(text)
					Label["22"]["Text"] = text
				end
				
				return Label
			end
			
			function GroupBox:Slider(options)
				options = Library:validate({
					text = "new sliduh";
					posx = "10";
					posy = "95";
					sizex = "150";
					sizey = "25";
					
					min = 0;
					max = 100;
					default = 50;
					
					Options = options;
					
					callback = function(v) print(v) end
				} ,options or {})
				
				local Slider = {
					Hover = false;
					MouseDown = false;
					Connection = nil;
				}
				
				
				--Render
				
				do
					Slider["1b"] = Instance.new("Frame", GroupBox["13"]);
					Slider["1b"]["BorderSizePixel"] = 2;
					Slider["1b"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30);
					Slider["1b"]["Size"] = UDim2.new(0, gsizex - 20, 0, 20);
					Slider["1b"]["BorderColor3"] = Color3.fromRGB(55, 55, 55);
					Slider["1b"]["Position"] = UDim2.new(0, options.posx, 0, options.posy);
					Slider["1b"]["Name"] = [[Slider]];
					Slider["1b"]["ZIndex"] = 2;

					Slider["1c"] = Instance.new("Frame", Slider["1b"]);
					Slider["1c"]["BorderSizePixel"] = 0;
					Slider["1c"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 127);
					Slider["1c"]["Size"] = UDim2.new(0, gsizex - 95, 0, 20);
					Slider["1c"]["BorderColor3"] = Color3.fromRGB(55, 55, 55);
					Slider["1c"]["Name"] = [[Draggable]];
					Slider["1c"]["ZIndex"] = 2;
					

					Slider["1d"] = Instance.new("TextLabel", Slider["1c"]);
					Slider["1d"]["TextWrapped"] = true;
					Slider["1d"]["TextScaled"] = true;
					Slider["1d"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 127);
					Slider["1d"]["FontFace"] = Font.new([[rbxasset://fonts/families/Nunito.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
					Slider["1d"]["TextSize"] = 14;
					Slider["1d"]["TextColor3"] = Color3.fromRGB(200, 200, 200);
					Slider["1d"]["Size"] = UDim2.new(0, gsizex - 20, 0, 20);
					Slider["1d"]["Text"] = tostring(options.default);
					Slider["1d"]["Name"] = [[Text]];
					Slider["1d"]["BackgroundTransparency"] = 1;
					Slider["1d"]["ZIndex"] = 2

					Slider["1e"] = Instance.new("TextLabel", Slider["1b"]);
					Slider["1e"]["TextWrapped"] = true;
					Slider["1e"]["TextScaled"] = true;
					Slider["1e"]["TextXAlignment"] = Enum.TextXAlignment.Left;
					Slider["1e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					Slider["1e"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
					Slider["1e"]["TextSize"] = 14;
					Slider["1e"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
					Slider["1e"]["Size"] = UDim2.new(0, gsizex - 30, 0, 20);
					Slider["1e"]["Text"] = options.text;
					Slider["1e"]["Name"] = [[Name]];
					Slider["1e"]["BackgroundTransparency"] = 1;
					Slider["1e"]["Position"] = UDim2.new(0, 1, -1.0333333015441895, 0);
					Slider["1e"]["ZIndex"] = 2;
				end
				
				--Methods
				
				do
					function Slider:GetValue()
						return tonumber(Slider["1d"].Text)
					end

					function Slider:SetValue(v)
						if v == nil then
							local percentage = math.clamp((mouse.X - Slider["1b"].AbsolutePosition.X) / (Slider["1b"].AbsoluteSize.X), 0, options.increment)
							local value = math.floor(((options.max - options.min) * percentage ) + options.min)

							Slider["1d"].Text = tostring(value)
							Slider["1c"].Size = UDim2.fromScale(percentage, 1)
						else
							Slider["1d"].Text = tostring(v)
							Slider["1c"].Size = UDim2.fromScale(((v - options.min) / (options.max - options.min)), 1)
						end
						options.callback(Slider:GetValue())
					end
				end
				
				--Logic
				
				do*
					Slider["1d"].MouseEnter:Connect(function()
						Slider.Hover = true
						Library:tween(Slider["1d"], {TextColor3 = Color3.fromRGB(255, 255, 255)})
						Library:tween(Slider["1c"], {BackgroundColor3 = Color3.fromRGB(0, 85, 255)})
					end)

					Slider["1d"].MouseLeave:Connect(function()
						Slider.Hover = false
						if not Slider.MouseDown then
							Library:tween(Slider["1d"], {TextColor3 = Color3.fromRGB(200, 200, 200)})
							Library:tween(Slider["1c"], {BackgroundColor3 = Color3.fromRGB(0, 0, 127)})
						end
					end)

					uis.InputBegan:Connect(function(input, gpe)
						if gpe then return end

						if input.UserInputType == Enum.UserInputType.MouseButton1 and Slider.Hover then
							Slider.MouseDown = true
							Library:tween(Slider["1d"], {TextColor3 = Color3.fromRGB(200, 200, 200)})
							Library:tween(Slider["1c"], {BackgroundColor3 = Color3.fromRGB(0, 0, 127)})
								
							
							if not Slider.Connection then
								Slider.Connection = runser.RenderStepped:Connect(function()
									Slider:SetValue()
								end)
							end
						end
					end)

					uis.InputEnded:Connect(function(input, gpe)
						if gpe then return end

						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							Slider.MouseDown = false
							if Slider.Hover then
								Library:tween(Slider["1d"], {TextColor3 = Color3.fromRGB(255, 255, 255)})
								Library:tween(Slider["1c"], {BackgroundColor3 = Color3.fromRGB(0, 85, 255)})
							else
								Library:tween(Slider["1d"], {TextColor3 = Color3.fromRGB(200, 200, 200)})
								Library:tween(Slider["1c"], {BackgroundColor3 = Color3.fromRGB(0, 0, 127)})
							end
							
							if Slider.Connection then
								Slider.Connection:Disconnect()
							end
							Slider.Connection = nil
						end
					end)
				end
				
				Slider:SetValue(options.default)
				
				return Slider
			end
			
			function GroupBox:Toggle(options)
				options = Library:validate({
					text = "toggle";
					posx = "10";
					posy = "125";
					sizex = "20";
					sizey = "20";

					Options = options;

					callback = function() end
				} ,options or {})
				
				local Toggle = {
					Hover = false;
					MouseDown = false;
					State = false;
				}
				
				--Render
				
				do
					-- StarterGui.BoronLibrary.Main.Inner.MainInner.testTab.test1.Toggle
					Toggle["18"] = Instance.new("Frame", GroupBox["13"]);
					Toggle["18"]["BorderSizePixel"] = 2;
					Toggle["18"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30);
					Toggle["18"]["Size"] = UDim2.new(0, options.sizex, 0, options.sizey);
					Toggle["18"]["BorderColor3"] = Color3.fromRGB(55, 55, 55);
					Toggle["18"]["Position"] = UDim2.new(0, options.posx, 0, options.posy);
					Toggle["18"]["Name"] = [[Toggle]];
					Toggle["18"]["ZIndex"] = 2;

					-- StarterGui.BoronLibrary.Main.Inner.MainInner.testTab.test1.Toggle.ToggleFrame
					Toggle["ae"] = Instance.new("Frame", Toggle["18"]);
					Toggle["ae"]["BorderSizePixel"] = 0;
					Toggle["ae"]["Size"] = UDim2.new(0, 20, 0, 20);
					Toggle["ae"]["BorderColor3"] = Color3.fromRGB(55, 55, 55);
					Toggle["ae"]["Name"] = [[ToggleFrame]];
					Toggle["ae"]["ZIndex"] = 2;
					
					toggle = Toggle["ae"]
					
					if Toggle.State == true then
						Toggle["ae"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 127);
					elseif Toggle.State == false then
						Toggle["ae"]["BackgroundColor3"] = Color3.fromRGB(30,30,30);
					end

					-- StarterGui.BoronLibrary.Main.Inner.MainInner.testTab.test1.Toggle.Name
					Toggle["1a"] = Instance.new("TextLabel", Toggle["18"]);
					Toggle["1a"]["TextWrapped"] = true;
					Toggle["1a"]["BorderSizePixel"] = 0;
					Toggle["1a"]["TextScaled"] = true;
					Toggle["1a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					Toggle["1a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
					Toggle["1a"]["FontFace"] = Font.new([[rbxasset://fonts/families/Nunito.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
					Toggle["1a"]["TextSize"] = 14;
					Toggle["1a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
					Toggle["1a"]["Size"] = UDim2.new(0, 120, 0, 20);
					Toggle["1a"]["Text"] = options.text;
					Toggle["1a"]["Name"] = [[Name]];
					Toggle["1a"]["BackgroundTransparency"] = 1;
					Toggle["1a"]["Position"] = UDim2.new(0, 30, 0, 0);
					Toggle["1a"]["ZIndex"] = 2;
				end
				

				--Methods
				do
					function Toggle:Toggle(b)
						if b == nil then
							Toggle.State = not Toggle.State
						else
							Toggle.State = b
						end

						if Toggle.State then
							Library:tween(Toggle["ae"], {BackgroundColor3 = Color3.fromRGB(0, 0, 127)})
						else
							Library:tween(Toggle["ae"], {BackgroundColor3 = Color3.fromRGB(30, 30, 30)})
						end


						options.callback(Toggle.State)
					end
				end
				
				--Logic
				
				do
					Toggle["ae"].MouseEnter:Connect(function()
						Toggle.Hover = true
						if Toggle.State == true then
							Library:tween(Toggle["ae"], {BackgroundColor3 = Color3.fromRGB(0, 85, 255)})
						elseif Toggle.State == false then
							Library:tween(Toggle["ae"], {BackgroundColor3 = Color3.fromRGB(45, 45, 45)})
						end
					end)

					Toggle["ae"].MouseLeave:Connect(function()
						Toggle.Hover = false
						if not Toggle.MouseDown then
							if Toggle.State == true then
								Library:tween(Toggle["ae"], {BackgroundColor3 = Color3.fromRGB(0, 0, 127)})
							elseif Toggle.State == false then
								Library:tween(Toggle["ae"], {BackgroundColor3 = Color3.fromRGB(30, 30, 30)})
							end
						end
					end)

					uis.InputBegan:Connect(function(input, gpe)
						if gpe then return end

						if input.UserInputType == Enum.UserInputType.MouseButton1 and Toggle.Hover then
							Toggle.MouseDown = true
							Toggle:Toggle()
						end
					end)

					uis.InputEnded:Connect(function(input, gpe)
						if gpe then return end

						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							Toggle.MouseDown = false
							if Toggle.Hover then
								if Toggle.State == true then
									Library:tween(Toggle["ae"], {BackgroundColor3 = Color3.fromRGB(30, 30, 30)})
								else
									Library:tween(Toggle["ae"], {BackgroundColor3 = Color3.fromRGB(0, 0, 127)})
								end							
							end
						end
					end)
				end
				
				return Toggle
			end
			
			function GroupBox:Dropdown(options)
				options = Library:validate({
					text = "new dropdown",
					posy = "170";
					callback = function(v) print(v) end,
					items = {}
				}, options or {})
				
				local Dropdown = {
					Items = {
						["id"] = { 
							"value"
						}
					},
					Open = false,
					MouseDown = false,
					Hover = false,
					HoveringItem = false
				}
				
				local osize = 40
				
				--Render
				do 
					-- StarterGui.BoronLibrary.Main.Inner.MainInner.testTab.test1.Dropdown
					Dropdown["17"] = Instance.new("Frame", GroupBox["13"]);
					Dropdown["17"]["BorderSizePixel"] = 2;
					Dropdown["17"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30);
					Dropdown["17"]["Size"] = UDim2.new(0, 150, 0, 20);
					Dropdown["17"]["BorderColor3"] = Color3.fromRGB(55, 55, 55);
					Dropdown["17"]["Position"] = UDim2.new(0, 10, 0, options.posy);
					Dropdown["17"]["Name"] = [[Dropdown]];
					Dropdown["17"]["ZIndex"] = 2;

					-- StarterGui.BoronLibrary.Main.Inner.MainInner.testTab.test1.Dropdown.Name
					Dropdown["18"] = Instance.new("TextLabel", Dropdown["17"]);
					Dropdown["18"]["TextWrapped"] = true;
					Dropdown["18"]["TextScaled"] = true;
					Dropdown["18"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					Dropdown["18"]["TextXAlignment"] = Enum.TextXAlignment.Left;
					Dropdown["18"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
					Dropdown["18"]["TextSize"] = 14;
					Dropdown["18"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
					Dropdown["18"]["Size"] = UDim2.new(0, 150, 0, 20);
					Dropdown["18"]["Text"] = options.text;
					Dropdown["18"]["Name"] = [[Name]];
					Dropdown["18"]["BackgroundTransparency"] = 1;
					Dropdown["18"]["Position"] = UDim2.new(0, 0, -1.031977891921997, 0);
					Dropdown["18"]["ZIndex"] = 2;

					-- StarterGui.BoronLibrary.Main.Inner.MainInner.testTab.test1.Dropdown.Options
					Dropdown["19"] = Instance.new("Frame", Dropdown["17"]);
					Dropdown["19"]["BorderSizePixel"] = 2;
					Dropdown["19"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30);
					Dropdown["19"]["Size"] = UDim2.new(0, 150, 0, 12);
					Dropdown["19"]["BorderColor3"] = Color3.fromRGB(45, 45, 45);
					Dropdown["19"]["Position"] = UDim2.new(0, 0, 1, 0);
					Dropdown["19"]["Visible"] = false;
					Dropdown["19"]["Name"] = [[Options]];
					Dropdown["19"]["ZIndex"] = 4;

					-- StarterGui.BoronLibrary.Main.Inner.MainInner.testTab.test1.Dropdown.Options.Option

					-- StarterGui.BoronLibrary.Main.Inner.MainInner.testTab.test1.Dropdown.Options.UIListLayout
					Dropdown["1c"] = Instance.new("UIListLayout", Dropdown["19"]);
					Dropdown["1c"]["Padding"] = UDim.new(0, 1);
					Dropdown["1c"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

					-- StarterGui.BoronLibrary.Main.Inner.MainInner.testTab.test1.Dropdown.SelectedOption
					Dropdown["1d"] = Instance.new("TextLabel", Dropdown["17"]);
					Dropdown["1d"]["TextWrapped"] = true;
					Dropdown["1d"]["BorderSizePixel"] = 0;
					Dropdown["1d"]["TextScaled"] = true;
					Dropdown["1d"]["BackgroundColor3"] = Color3.fromRGB(45, 45, 45);
					Dropdown["1d"]["TextXAlignment"] = Enum.TextXAlignment.Left;
					Dropdown["1d"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
					Dropdown["1d"]["TextSize"] = 14;
					Dropdown["1d"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
					Dropdown["1d"]["Size"] = UDim2.new(0, 150, 0, 20);
					Dropdown["1d"]["Text"] = [[none]];
					Dropdown["1d"]["Name"] = [[SelectedOption]];
					Dropdown["1d"]["ZIndex"] = 2;
				end
				
				--Methods
				do	
					function Dropdown:Toggle()
						Dropdown.Open = not Dropdown.Open

						if not Dropdown.Open then
							Dropdown["19"].Size = UDim2.new(0, 150, 0, 40)
							Dropdown["19"].Visible = false
						else
							local count = 0
							for i, v in pairs(Dropdown.Items) do
								if v ~= nil then
									count += 1
								end
							end

							Dropdown["19"].Visible = true
							Dropdown["19"].Size = UDim2.new(0, 150, 0, 12 + (count * 19) + 1)
						end
					end
					
					function Dropdown:Remove(id)
						if Dropdown.Items[id] ~= nil then
							if Dropdown.Items[id].instance ~= nil then
								for i, v in pairs(Dropdown.Items[id].instance) do
									v:Destroy()
								end
							end
							Dropdown.Items[id] = nil
						end
					end

					function Dropdown:Clear()
						for i, v in pairs(Dropdown.Items) do
							Dropdown:Remove(i)
						end
					end
					
					function Dropdown:SetText(text)
						Dropdown["1d"]["Text"] = text
					end
					
					function Dropdown:Add(id, value)
						local Item = {
							Hover = false,
							MouseDown = false
						}

						if Dropdown.Items[id] ~= nil then
							return
						end

						Dropdown.Items[id] = {
							instance = {},
							value = value
						}
						-- StarterGui.MyLibrary.Main.ContentContainer.HomeTab.Dropdown.OptionHolder.Inactive Option
						Dropdown.Items[id].instance["1a"] = Instance.new("TextLabel", Dropdown["19"]);
						Dropdown.Items[id].instance["1a"]["TextWrapped"] = true;
						Dropdown.Items[id].instance["1a"]["TextScaled"] = true;
						Dropdown.Items[id].instance["1a"]["BackgroundColor3"] = Color3.fromRGB(30, 30, 30);
						Dropdown.Items[id].instance["1a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
						Dropdown.Items[id].instance["1a"]["FontFace"] = Font.new([[rbxasset://fonts/families/SourceSansPro.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
						Dropdown.Items[id].instance["1a"]["TextSize"] = 14;
						Dropdown.Items[id].instance["1a"]["TextColor3"] = Color3.fromRGB(200, 200, 200);
						Dropdown.Items[id].instance["1a"]["Size"] = UDim2.new(0, 150, 0, 20);
						Dropdown.Items[id].instance["1a"]["BorderColor3"] = Color3.fromRGB(65, 65, 65);
						Dropdown.Items[id].instance["1a"]["Text"] = id;
						Dropdown.Items[id].instance["1a"]["Name"] = [[Option]];
						Dropdown.Items[id].instance["1a"]["Position"] = UDim2.new(0, 0, 0, 0, 0);
						Dropdown.Items[id].instance["1a"]["ZIndex"] = 4;



						Dropdown.Items[id].instance["1a"].MouseEnter:Connect(function()
							Item.Hover = true
							Dropdown.HoveringItem = true


						end)

						Dropdown.Items[id].instance["1a"].MouseLeave:Connect(function()
							Item.Hover = false
							Dropdown.HoveringItem = false

							if not Item.MouseDown then

							end
						end)

						uis.InputBegan:Connect(function(input, gpe)
							if gpe then return end

							if Dropdown.Items[id] == nil then return end

							if input.UserInputType == Enum.UserInputType.MouseButton1 and Item.Hover then
								Item.MouseDown = true
								options.callback(value)
								Dropdown:SetText(id)
								Dropdown:Toggle()
							end
						end)
					end
				end
				
				--Logic

				do
					Dropdown["1d"].MouseEnter:Connect(function()
						Dropdown.Hover = true
					end)

					Dropdown["1d"].MouseLeave:Connect(function()
						Dropdown.Hover = false
					end)

					uis.InputBegan:Connect(function(input, gpe)
						if gpe then return end

						if input.UserInputType == Enum.UserInputType.MouseButton1 and Dropdown.Hover then
							Dropdown.MouseDown = true
							
							Dropdown:Toggle()
						end
					end)

					uis.InputEnded:Connect(function(input, gpe)
						if gpe then return end

						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							Dropdown.MouseDown = false
							if Dropdown.Hover then
											
							end
						end
					end)
				end
				
				return Dropdown
				
			end
			
			function GroupBox:ColorPicker(options)
				options = Library:validate({
					text = "new color picker",
					posy = "195";
					callback = function(v) end,
					items = {}
				}, options or {})
				
				local ColorPicker = {
					Hover = false;
					MouseDown = false;
					Open = false;
					Color = Color3.fromRGB(0, 0, 0);
				}
				
				--Render
				do
					-- StarterGui.BoronLibrary.Main.Inner.MainInner.testTab.test1.ColorPicker
					ColorPicker["24"] = Instance.new("Frame", GroupBox["13"]);
					ColorPicker["24"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					ColorPicker["24"]["BackgroundTransparency"] = 1;
					ColorPicker["24"]["Size"] = UDim2.new(0, 150, 0, 20);
					ColorPicker["24"]["Position"] = UDim2.new(0.052941177040338516, 0, 0, options.posy);
					ColorPicker["24"]["Name"] = [[ColorPicker]];
					ColorPicker["24"]["ZIndex"] = 2;

					-- StarterGui.BoronLibrary.Main.Inner.MainInner.testTab.test1.ColorPicker.Name
					ColorPicker["25"] = Instance.new("TextLabel", ColorPicker["24"]);
					ColorPicker["25"]["TextWrapped"] = true;
					ColorPicker["25"]["ZIndex"] = 6;
					ColorPicker["25"]["TextScaled"] = true;
					ColorPicker["25"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					ColorPicker["25"]["TextXAlignment"] = Enum.TextXAlignment.Left;
					ColorPicker["25"]["FontFace"] = Font.new([[rbxasset://fonts/families/Nunito.json]], Enum.FontWeight.Regular, Enum.FontStyle.Normal);
					ColorPicker["25"]["TextSize"] = 14;
					ColorPicker["25"]["TextColor3"] = Color3.fromRGB(200, 200, 200);
					ColorPicker["25"]["Size"] = UDim2.new(0, 120, 0, 20);
					ColorPicker["25"]["Text"] = options.text;
					ColorPicker["25"]["Name"] = [[Name]];
					ColorPicker["25"]["BackgroundTransparency"] = 1;
					ColorPicker["25"]["ZIndex"] = 2;

					-- StarterGui.BoronLibrary.Main.Inner.MainInner.testTab.test1.ColorPicker.OpenFrame
					ColorPicker["26"] = Instance.new("Frame", ColorPicker["24"]);
					ColorPicker["26"]["BorderSizePixel"] = 0;
					ColorPicker["26"]["BackgroundColor3"] = Color3.fromRGB(0, 0, 128);
					ColorPicker["26"]["Size"] = UDim2.new(0, 20, 0, 20);
					ColorPicker["26"]["Position"] = UDim2.new(0, 120, 0, 0);
					ColorPicker["26"]["Name"] = [[OpenFrame]];
					ColorPicker["26"]["ZIndex"] = 2;
					
					-- StarterGui.BoronLibrary.Main.ColorPickerFrame
					ColorPicker["27"] = Instance.new("Frame", GUI["2"]);
					ColorPicker["27"]["BorderSizePixel"] = 2;
					ColorPicker["27"]["BackgroundColor3"] = Color3.fromRGB(31, 31, 31);
					ColorPicker["27"]["Size"] = UDim2.new(0, 253, 0, 250);
					ColorPicker["27"]["BorderColor3"] = Color3.fromRGB(0, 0, 128);
					ColorPicker["27"]["Position"] = UDim2.new(-0.8291457295417786, 0, 0.23317307233810425, 0);
					ColorPicker["27"]["Visible"] = false;
					ColorPicker["27"]["Name"] = [[ColorPickerFrame]];

					-- StarterGui.BoronLibrary.Main.ColorPickerFrame.ColourWheel
					ColorPicker["28"] = Instance.new("ImageButton", ColorPicker["27"]);
					ColorPicker["28"]["Active"] = false;
					ColorPicker["28"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					ColorPicker["28"]["Selectable"] = false;
					ColorPicker["28"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
					ColorPicker["28"]["Image"] = [[http://www.roblox.com/asset/?id=6020299385]];
					ColorPicker["28"]["Size"] = UDim2.new(0, 199, 0, 200);
					ColorPicker["28"]["Name"] = [[ColourWheel]];
					ColorPicker["28"]["BorderColor3"] = Color3.fromRGB(66, 66, 66);
					ColorPicker["28"]["Position"] = UDim2.new(0.4261687695980072, 0, 0.49657079577445984, 0);
					ColorPicker["28"]["BackgroundTransparency"] = 1;

					-- StarterGui.BoronLibrary.Main.ColorPickerFrame.ColourWheel.Picker
					ColorPicker["29"] = Instance.new("ImageLabel", ColorPicker["28"]);
					ColorPicker["29"]["BorderSizePixel"] = 0;
					ColorPicker["29"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					ColorPicker["29"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
					ColorPicker["29"]["Image"] = [[http://www.roblox.com/asset/?id=3678860011]];
					ColorPicker["29"]["Size"] = UDim2.new(0.09002578258514404, 0, 0.09002579748630524, 0);
					ColorPicker["29"]["Name"] = [[Picker]];
					ColorPicker["29"]["BackgroundTransparency"] = 1;
					ColorPicker["29"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

					-- StarterGui.BoronLibrary.Main.ColorPickerFrame.DarknessPicker
					ColorPicker["2a"] = Instance.new("ImageButton", ColorPicker["27"]);
					ColorPicker["2a"]["Active"] = false;
					ColorPicker["2a"]["ZIndex"] = 2;
					ColorPicker["2a"]["SliceCenter"] = Rect.new(100, 100, 100, 100);
					ColorPicker["2a"]["ScaleType"] = Enum.ScaleType.Slice;
					ColorPicker["2a"]["SliceScale"] = 0.11999999731779099;
					ColorPicker["2a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
					ColorPicker["2a"]["Selectable"] = false;
					ColorPicker["2a"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
					ColorPicker["2a"]["Image"] = [[rbxassetid://0]];
					ColorPicker["2a"]["Size"] = UDim2.new(0, 15, 0, 196);
					ColorPicker["2a"]["Name"] = [[DarknessPicker]];
					ColorPicker["2a"]["BorderColor3"] = Color3.fromRGB(66, 66, 66);
					ColorPicker["2a"]["Position"] = UDim2.new(0.8883917331695557, 0, 0.5062283873558044, 0);

					-- StarterGui.BoronLibrary.Main.ColorPickerFrame.DarknessPicker.UIGradient
					ColorPicker["2b"] = Instance.new("UIGradient", ColorPicker["2a"]);
					ColorPicker["2b"]["Rotation"] = 90;
					ColorPicker["2b"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 0, 0))};

					-- StarterGui.BoronLibrary.Main.ColorPickerFrame.DarknessPicker.Slider
					ColorPicker["2c"] = Instance.new("ImageLabel", ColorPicker["2a"]);
					ColorPicker["2c"]["ZIndex"] = 2;
					ColorPicker["2c"]["SliceCenter"] = Rect.new(100, 100, 100, 100);
					ColorPicker["2c"]["ScaleType"] = Enum.ScaleType.Slice;
					ColorPicker["2c"]["BackgroundColor3"] = Color3.fromRGB(31, 31, 31);
					ColorPicker["2c"]["ImageColor3"] = Color3.fromRGB(255, 75, 75);
					ColorPicker["2c"]["SliceScale"] = 0.11999999731779099;
					ColorPicker["2c"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
					ColorPicker["2c"]["Image"] = [[rbxassetid://0]];
					ColorPicker["2c"]["Size"] = UDim2.new(1.286563515663147, 0, 0.02650105021893978, 0);
					ColorPicker["2c"]["BorderColor3"] = Color3.fromRGB(66, 66, 66);
					ColorPicker["2c"]["Name"] = [[Slider]];
					ColorPicker["2c"]["Position"] = UDim2.new(0.491197794675827, 0, 0.07336070388555527, 0);

				end
				
				--Methods
				do
					function ColorPicker:Toggle()
						ColorPicker.Open = not ColorPicker.Open

						if not ColorPicker.Open then
							ColorPicker["27"].Visible = false
						else
							ColorPicker["27"].Visible = true
						end
					end
					
					local buttonDown = false
					local movingSlider = false
					
					local colourWheel = ColorPicker["28"]
					local wheelPicker = colourWheel:WaitForChild("Picker")

					local darknessPicker = ColorPicker["2a"]
					local darknessSlider = darknessPicker:WaitForChild("Slider")


					local function updateColour(centreOfWheel)
						if not GUI then return end

						local colourPickerCentre = Vector2.new(
							colourWheel.Picker.AbsolutePosition.X + (colourWheel.Picker.AbsoluteSize.X/2),
							colourWheel.Picker.AbsolutePosition.Y + (colourWheel.Picker.AbsoluteSize.Y/2)
						)
						local h = (math.pi - math.atan2(colourPickerCentre.Y - centreOfWheel.Y, colourPickerCentre.X - centreOfWheel.X)) / (math.pi * 2)

						local s = (centreOfWheel - colourPickerCentre).Magnitude / (colourWheel.AbsoluteSize.X/2)

						local v = math.abs((darknessSlider.AbsolutePosition.Y - darknessPicker.AbsolutePosition.Y) / darknessPicker.AbsoluteSize.Y - 1)

						local hsv = Color3.fromHSV(math.clamp(h, 0, 1), math.clamp(s, 0, 1), math.clamp(v, 0, 1))

						ColorPicker.Color = hsv
						
						ColorPicker["26"]["BackgroundColor3"] = hsv
						options.callback(hsv)
						
						darknessPicker.UIGradient.Color = ColorSequence.new{
							ColorSequenceKeypoint.new(0, hsv), 
							ColorSequenceKeypoint.new(1, Color3.new(0, 0, 0))
						}
					end

					colourWheel.MouseButton1Down:Connect(function()
						buttonDown = true
					end)

					darknessPicker.MouseButton1Down:Connect(function()
						movingSlider = true
					end)


					uis.InputEnded:Connect(function(input)

						if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end

						buttonDown = false
						movingSlider = false
					end)


					uis.InputChanged:Connect(function(input)

						if input.UserInputType ~= Enum.UserInputType.MouseMovement then return end


						local mousePos = uis:GetMouseLocation() - Vector2.new(0, game:GetService("GuiService"):GetGuiInset().Y)

						local centreOfWheel = Vector2.new(colourWheel.AbsolutePosition.X + (colourWheel.AbsoluteSize.X/2), colourWheel.AbsolutePosition.Y + (colourWheel.AbsoluteSize.Y/2))

						local distanceFromWheel = (mousePos - centreOfWheel).Magnitude


						if distanceFromWheel <= colourWheel.AbsoluteSize.X/2 and buttonDown then

							wheelPicker.Position = UDim2.new(0, mousePos.X - colourWheel.AbsolutePosition.X, 0, mousePos.Y - colourWheel.AbsolutePosition.Y)


						elseif movingSlider then

							darknessSlider.Position = UDim2.new(darknessSlider.Position.X.Scale, 0, 0, 
								math.clamp(
									mousePos.Y - darknessPicker.AbsolutePosition.Y, 
									0, 
									darknessPicker.AbsoluteSize.Y)
							)	
						end


						updateColour(centreOfWheel)
						
					end)
				end
				
				
				--Logic
				do

					ColorPicker["26"].MouseEnter:Connect(function()
						ColorPicker.Hover = true
						Library:tween(ColorPicker["25"], {TextColor3 = Color3.fromRGB(255, 255, 255)})
					end)

					ColorPicker["26"].MouseLeave:Connect(function()
						ColorPicker.Hover = false
						Library:tween(ColorPicker["25"], {TextColor3 = Color3.fromRGB(200, 200, 200)})
					end)

					uis.InputBegan:Connect(function(input, gpe)
						if gpe then return end

						if input.UserInputType == Enum.UserInputType.MouseButton1 and ColorPicker.Hover then
							ColorPicker.MouseDown = true

							ColorPicker:Toggle()
						end
					end)

					uis.InputEnded:Connect(function(input, gpe)
						if gpe then return end

						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							ColorPicker.MouseDown = false
							if ColorPicker.Hover then

							end
						end
					end)
				end
			end
			
			return GroupBox
		end
		

		return Tab
	end
	
	uis.InputBegan:Connect(function(input, gpe)
		local db = false
		if gpe then return end
		if db == true then return end
		
		if input.KeyCode == Enum.KeyCode.RightShift then
			GUI:Toggle()
			wait()
			db = true
			wait(0.5)
			db = false
		end
	end)
	
	return GUI
end

return Library
